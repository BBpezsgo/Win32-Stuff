<?xml version="1.0" encoding="utf-8" ?>
<docs>
  <summary>
    Retrieves a handle to the specified standard device
    (standard input, standard output, or standard error).
  </summary>
  <param name="nStdHandle">
    The standard device. This parameter can be one of the following values.
    <list type="table">

      <item>
        <term>
          <see cref="StdHandle.STD_INPUT_HANDLE"/> ((<see cref="DWORD"/>)-10)
        </term>
        <description>
          The standard input device.
          Initially, this is the console input buffer, <c>CONIN$</c>.
        </description>
      </item>

      <item>
        <term>
          <see cref="StdHandle.STD_OUTPUT_HANDLE"/> ((<see cref="DWORD"/>)-11)
        </term>
        <description>
          The standard output device.
          Initially, this is the active console screen buffer, <c>CONOUT$</c>.
        </description>
      </item>

      <item>
        <term>
          <see cref="StdHandle.STD_ERROR_HANDLE"/> ((<see cref="DWORD"/>)-12)
        </term>
        <description>
          The standard error device.
          Initially, this is the active console screen buffer, <c>CONOUT$</c>.
        </description>
      </item>

    </list>
  </param>
  <returns>
    <para>
      If the function succeeds, the return value is a handle to the
      specified device, or a redirected handle set by a previous call
      to <see cref="SetStdHandle"/>. The handle has <c>GENERIC_READ</c> and <c>GENERIC_WRITE</c> access rights,
      unless the application has used <see cref="SetStdHandle"/> to set a standard handle with lesser access.
    </para>
    <para>
      If the function fails, the return
      value is <see cref="INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="GetLastError"/>.
    </para>
    <para>
      If an application does not have associated standard handles,
      such as a service running on an interactive desktop, and has not redirected them,
      the return value is <c>NULL</c>.
    </para>
  </returns>
  <remarks>
    <para>
      Handles returned by <c>GetStdHandle</c> can be used by applications that
      need to read from or write to the console. When a console is created,
      the standard input handle is a handle to the console's input buffer,
      and the standard output and standard error handles are handles of the
      console's active screen buffer. These handles can be used by the <see cref="ReadFile"/>
      and <see cref="WriteFile"/> functions, or by any of the console functions that access
      the console input buffer or a screen buffer (for example, the <see cref="ReadConsoleInput"/>,
      <see cref="WriteConsole"/>, or <see cref="GetConsoleScreenBufferInfo"/> functions).
    </para>
    <para>
      The standard handles of a process may be redirected by a call
      to <see cref="SetStdHandle"/>, in which case <c>GetStdHandle</c> returns the redirected
      handle. If the standard handles have been redirected, you can specify
      the <c>CONIN$</c> value in a call to the <see cref="CreateFile"/> function to get a handle
      to a console's input buffer. Similarly, you can specify the <c>CONOUT$</c> value
      to get a handle to a console's active screen buffer.
    </para>
    <para>
      The standard handles of a process on entry of the main method are dictated by
      the configuration of the <c>/SUBSYSTEM</c> flag passed to the linker when the application
      was built. Specifying <c>/SUBSYSTEM:CONSOLE</c> requests that the operating system fill
      the handles with a console session on startup, if the parent didn't already fill
      the standard handle table by inheritance. On the contrary, <c>/SUBSYSTEM:WINDOWS</c>
      implies that the application does not need a console and will likely not be making
      use of the standard handles. More information on handle inheritance can be found in
      the documentation for <c>STARTF_USESTDHANDLES</c>.
    </para>
    <para>
      Some applications operate outside the boundaries of their
      declared subsystem; for instance, a <c>/SUBSYSTEM:WINDOWS</c>
      application might check/use standard handles for logging
      or debugging purposes but operate normally with a graphical
      user interface. These applications will need to carefully probe the state
      of standard handles on startup and make use of <see cref="AttachConsole"/>, <see cref="AllocConsole"/>,
      and <see cref="FreeConsole"/> to add/remove a console if desired.
    </para>
    <para>
      Some applications may also vary their behavior on the type of inherited handle.
      Disambiguating the type between console, pipe, file, and others can be performed with <see cref="GetFileType"/>.
    </para>
  </remarks>
</docs>